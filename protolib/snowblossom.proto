syntax = "proto3";
option java_multiple_files = true;
option java_package = "snowblossom.proto";
option java_outer_classname = "SnowBlossomProto";

import "trie.proto";

package snowblossom;

// ---------------------------------------
// THE REAL CORE OF THE CHAIN AND PROTOCOL
// ---------------------------------------

// Block hash = mix of all the things in the block header
message Block {
  BlockHeader header = 1;
  repeated Transaction transactions = 2;

  // Must be in order of asc(shard_id, block height)
  repeated ImportedBlock imported_blocks = 3;
}

message ImportedBlock {
  BlockHeader header = 1;

  // As we might be including inherited parent blocks
  // we might be bring in more than one list of outputs
  // Map of shard id (that we are importing) to list of outputs
  map<int32, ImportedOutputList> import_outputs = 2;
}

message ImportedOutputList {
  // Might need to send these as ByteStrings
  // for encoding reasons
  repeated ImportedOutput tx_outs = 2;
}

message ImportedOutput {
  bytes raw_output = 1;
  bytes tx_id = 2;
  int32 out_idx = 3;
}


message SnowPowProof {
  int64 word_idx = 1; //Index of word in snow field
  repeated bytes merkle_component = 2; // List of hashes
}

// The POW works via the first elements here all mixed
// to make a hash that decides which TXs to pull from previous
// blocks to make the back_tx_hash.
// Then all of it mixed to make the block hash, which has to be
// less than the target hash.
message BlockHeader {
  int32 version = 1;
  int32 block_height = 2;
  bytes prev_block_hash = 3;
  bytes merkle_root_hash = 4;
  bytes utxo_root_hash = 5;
  bytes nonce = 6; // should be exactly 12 bytes
  int64 timestamp = 7;
  bytes target = 8;
  int32 snow_field = 9; // Number of which snow field is in use
  bytes snow_hash = 10; // From POW function, becomes block hash
  repeated SnowPowProof pow_proof = 11;

  // Things below here added for shards
  // Version 2 things

  int32 shard_id = 12;

  // UTXO roots of all outputs we are mapping to other shards
  map<int32, bytes> shard_export_root_hash = 13;

  // Shard -> list of blocks
  map<int32, BlockImportList > shard_import = 14;

  // Might need to add the transaction data size sum if we want 
  // to have light validation of shard splits
  int32 tx_data_size_sum = 15;

  int32 tx_count = 16;

}

message BlockImportList
{
  // Height -> Block Hash
  map<int32, bytes> height_map = 1;
}

// TX Hash is hmac(sha256(inner_data), sha256(signature_data))
message Transaction {
  bytes tx_hash = 1;
  // Expected to be a TransactionInner proto, but we carry it as bytes because
  // we need it to have the same hash even after reserializing
  bytes inner_data = 2; 

  repeated SignatureEntry signatures = 3;
}

message TransactionInner {
  int32 version = 1;
  bool is_coinbase = 2;
  CoinbaseExtras coinbase_extras = 3;
  repeated TransactionInput inputs = 4;
  repeated TransactionOutput outputs = 5;
  
  // Needed to claim an script_hash, this address spec
  // must hash to the recipient_spec_hash claimed
  // There must be a claim that matches the recipient_spec_hash for
  // Each output spent in the inputs list of this transaction
  //
  // If multiple inputs need the same recipient_spec_hash, a single
  // claim shall suffice for them
  repeated AddressSpec claims = 6;
  //TransactionRequirements requirements = 7;
  int64 fee = 8;
  bytes extra = 10; //Limited to 100 bytes, so short letters to grandma
}

message CoinbaseExtras {
  int32 block_height = 1; // this of course in the block header as well, but this makes sure that each
                          // coinbase is unique otherwise you can have multiple that hash to the same to great
                          // sadness (the bitcoin block chain has many lessons)
  bytes remarks = 2; //remarks from the miner for the good of the blockchain
  repeated int32 motions_approved = 3;
  repeated int32 motions_rejected = 4;
  int32 shard_id = 5; // Same idea as the block height
}

// If any of these are defined then
// these things are required to be met for the transaction
// to be confirmed or the TransactionOutput to be used
// depending on where the requirement is defined
message TransactionRequirements {
  //bytes required_block = 1;
  //bytes required_tx = 2;
  int32 required_block_height = 3;
  int64 required_time = 4;
}

message SignatureEntry {
  int32 claim_idx = 1;
  int32 key_idx = 2;
  bytes signature = 3;
}

message TransactionInput {
  bytes spec_hash = 1; 
  bytes src_tx_id = 2;
  int32 src_tx_out_idx = 3;
  int64 value = 4; // SIP4 - Optional - if set (non-zero) transaction validation will enforce
                   // this value being accurate.
}

message TransactionOutput {
  int64 value = 1;
  bytes recipient_spec_hash = 2;

  // This could easily make an unspendable output if it refernces a block or tx
  // that will never be in.  Use with care.
  TransactionRequirements requirements = 3;

  // Doesn't do anything protocol wise, other things might respect
  // this as something.
  bytes for_benefit_of_spec_hash = 4;

  // Also doesn't do anything protocol wise, but might be respected
  // by other things.  Usually to be used in conjunction with a fbo hash
  // spec (above).
  ClaimedIdentifiers ids = 5;
  int32 target_shard = 6;
}

message ClaimedIdentifiers {
  bytes username = 1;
  bytes channelname = 2;
}

// The hash of this will simply be the hash of:
// required_signers (4 bytes)
// number of sig_specs (4 bytes)
// for each sig spec:
//  -signature type (4 bytes)
//  -size of key (4 bytes)
//  -key data (matching size given)
//
message AddressSpec {
  int32 required_signers = 1;
  repeated SigSpec sig_specs = 2;
}

message SigSpec {
  int32 signature_type = 1;
  bytes public_key = 2;
}

// -------------------------------------------------
// SERVICES AND MESSAGES (TO AND FROM CLIENTS/PEERS)
// -------------------------------------------------

service PeerService {
  rpc SubscribePeering ( stream PeerMessage ) returns ( stream PeerMessage ) {}
}

service UserService {

  /* Subscribe to getting block templates to mine with */
  rpc SubscribeBlockTemplate( SubscribeBlockTemplateRequest ) returns (stream Block) {}

  /* Subscribe to getting block templates to mine with, 
   * but can use an RPC stream to update the template request */
  rpc SubscribeBlockTemplateStream( stream SubscribeBlockTemplateRequest ) returns (stream Block) {}
  rpc SubscribeBlockTemplateStreamExtended( stream SubscribeBlockTemplateRequest ) returns (stream BlockTemplate) {}
  rpc SubmitBlock ( Block ) returns ( SubmitReply ) {}
  rpc SubmitTransaction ( Transaction ) returns ( SubmitReply ) {}
  rpc GetUTXONode( GetUTXONodeRequest ) returns ( GetUTXONodeReply ) {}
  rpc GetUTXONodeMulti( GetUTXONodeRequest ) returns ( GetUTXOReplyList ) {}
  rpc GetMempoolTransactionList ( RequestAddress ) returns ( TransactionHashList ) {}
  rpc GetMempoolTransactionMap ( RequestAddress ) returns ( TransactionShardMap ) {}
  rpc GetAddressHistory ( RequestAddress ) returns ( HistoryList ) {} 

  rpc GetNodeStatus ( NullRequest ) returns ( NodeStatus ) {}
  rpc GetBlock ( RequestBlock ) returns ( Block ) {}
  rpc GetBlockSummary ( RequestBlockSummary ) returns ( BlockSummary ) {}
  rpc GetTransaction ( RequestTransaction ) returns ( Transaction ) {}
  rpc GetTransactionStatus ( RequestTransaction ) returns ( TransactionStatus ) {}
  rpc GetBlockHeader ( RequestBlockHeader ) returns ( BlockHeader ) {}
  rpc GetFeeEstimate ( NullRequest ) returns ( FeeEstimate ) {}
  rpc GetFBOList ( RequestAddress ) returns ( TxOutList ) {}
  rpc GetIDList ( RequestNameID ) returns ( TxOutList ) {} 
  rpc GetPeerList ( PeerListRequest ) returns ( PeerList ) {} 

  rpc SubscribeAddressUpdates ( RequestAddress ) returns ( stream AddressUpdate ) {} 
}

message BlockTemplate {
  Block block = 1;
  int32 advances_shard = 2;
}


message PeerMessage {
  oneof z {
    Transaction tx = 1;
    PeerChainTip tip = 2;

    RequestBlock req_block = 3;
    Block block = 4;

    RequestBlockHeader req_header = 5;
    BlockHeader header = 6;

    RequestTransaction req_cluster = 7;

    RequestImportedBlock req_import_block = 8;
    ImportedBlock import_block = 9;

    RequestPreviewChain req_preview_chain = 10;
    PreviewChain preview_chain = 11;
  }

  int32 req_header_shard_id = 50;
}

message PeerChainTip {
  string network_name = 1;
  BlockHeader header = 2;
  repeated PeerInfo peers = 3;
  string version = 4;
  SignedMessage signed_head = 5;
}

message PeerTipInfo {
  repeated BlockPreview previews = 1;
  BlockPreview coord_head = 2; // Best known coordinator head
}

message BlockPreview {
  int32 block_height = 1;
  bytes prev_block_hash = 2;
  bytes snow_hash = 3; // block hash
  int32 shard_id = 4;
}

message RequestPreviewChain {
  bytes start_block_hash = 1;
  int32 requested_blocks_back = 2;
}

message PreviewChain {
  repeated BlockPreview previews = 1;
}


message PeerInfo {
  string host = 1;
  int32 port = 2;
  int64 last_checked = 3;
  int64 last_passed = 4;
  int64 learned = 5;
  string version = 6;
  bytes node_id = 7;
  //bool tls = 8; bad idea, using enum - DEPRECATED
  bytes node_snow_address = 9; //Used for TLS
  enum ConnectionType {
    GRPC_TCP = 0;
    GRPC_TLS = 1;
  }
  ConnectionType connection_type = 10;
  repeated int32 shard_id_set = 11; // The set of shards I am configured for
  bytes trustnet_address = 12; // should switch this entire peer info into a signed object
                               // since otherwise, someone should fake a trustnet address and get
                               // a node to waste its peer pool connecting to nodes that are not 
                               // actually part of its trust network

  SignedMessage trustnet_signed_peer_info = 13;
}

message TransactionStatus {
  oneof z {
    bool unknown = 1;
    bool mempool = 2;
    bool confirmed = 3;
  }
  int32 height_confirmed = 4;
  int32 confirmations = 5;
}

message RequestBlock {
  oneof z {
    bytes block_hash = 2;
    int32 block_height = 3;
  }
  int32 shard_id = 4; // only does anything with block_height
}

message RequestBlockSummary {
  bytes block_hash = 1;
}
message RequestImportedBlock {
  bytes block_hash = 1;
}

message RequestTransaction {
  bytes tx_hash = 1;
}
message RequestBlockHeader {
  oneof z {
    int32 block_height = 1;
    bytes block_hash = 2; // only works by height in PeerMessage
  }
  int32 shard_id = 3; // only does anything with block_height
}

message AddressUpdate {
  bytes address = 1;
  bool mempool_changes = 2; // true iff there are mempool transactions
  bytes current_utxo_root = 4;
}

message SubmitReply {
  bool success = 1;
  string error_message = 2;
  int32 shard_accepted = 3;
}

message FeeEstimate {
  double fee_per_byte = 1; //flakes per byte of tx
  map<int32, double> shard_map = 2; // map of shard id to fee in flakes per byte of tx
}

message SubscribeBlockTemplateRequest {
  bytes pay_reward_to_spec_hash = 1;
  int64 refresh_delay = 2; // time in ms to get updated block templates of the same block number - ignored
  CoinbaseExtras extras = 3;
  map<string, double> pay_ratios = 4;
}

message GetUTXONodeRequest {
  bytes prefix = 1;
  bool include_proof = 2;
  int32 max_results = 3;

  // If root hash specified, answer will use this specific utxo root as basis rather than current.
  // Can be used to ask about about previous block or get a consistent view regardless of new
  // blocks for a series of queries. Also, Series of Queries will be my new anti-folk acapella band.
  oneof utxo_type {
    bytes utxo_root_hash = 4; // If set, use only this root hash
    int32 shard_id = 5; // if set, use current head of this shard
    bool all_shards = 6; // if set, return results for all shards
  }
}

message GetUTXONodeReply {
  bytes utxo_root_hash = 1;  // Which root hash was used to create this answer

  // if empty, then there is no node at or below the given prefix
  // If there is not a node exactly at prefix, may start with a node under that prefix
  // if 'max_results' is set, then there could be other noder under the prefix in the answer list as well.
  // In no particular order.  If the limit isn't high enough and the caller wants a full view of the subtree under the node
  // the caller will have to explore the returned nodes and ask about whichever ones have children that are not in this answer set.
  //
  // If the caller doesn't really give a crap, the caller can simply request with a high 'max_results'
  repeated TrieNode answer = 2;

  // The nodes that go from the top utxo root to the
  // requested prefix or would if they prefix node existed
  repeated TrieNode proof = 3;
}

message GetUTXOReplyList {
  // Maps shard id to GetUTXONodeReply
  map<int32, GetUTXONodeReply> reply_map = 1;
}

message RequestAddress {
  bytes address_spec_hash = 1;
}

message TransactionShardMap {
  map<int32, TransactionHashList> shard_map = 1;
}

message TransactionHashList {
  repeated bytes tx_hashes = 1;
}

message HistoryList {
  repeated HistoryEntry entries = 1;
  bool not_enabled = 2;
}
message HistoryEntry {
  int32 block_height = 1;
  bytes tx_hash = 2;
  bytes block_hash = 3;
  int32 shard = 4;

}

// A list of outputs
message TxOutList {
  repeated TxOutPoint out_list =1;
}

// A single output along with transaction id and out index
message TxOutPoint {
  TransactionOutput out = 1;
  bytes tx_hash = 2;
  int32 out_idx = 3;

}

message RequestNameID {
  enum IdType {
    USERNAME = 0;
    CHANNELNAME = 1;
  }
  IdType name_type = 1;
  bytes name = 2;
}

message NullRequest {

}

message NodeStatus {
  int32 mem_pool_size = 1;
  int32 connected_peers = 2;
  BlockSummary head_summary = 3;
  int32 estimated_nodes = 4;
  string node_version = 5;
  map<string, int32> version_map = 6;
  string network = 7;
  repeated int32 network_active_shards = 10;
  map<int32, bytes> shard_head_map = 11;
  map<int32, bytes> net_shard_head_map = 12;
  repeated int32 interest_shards = 13;
}

message PeerListRequest {
  int32 desired_results = 1;
  // If set, try to return peers that are members at least one of the specified trustnets
  repeated bytes trustnet_ids = 2;
}

message PeerList {
  repeated PeerInfo peers = 1;
}

// -----------------------------------------------------------------------
// LOCAL DATABASE THINGS - NOT PART OF PROTOCOL, NOT SENT OVER P2P NETWORK
// -----------------------------------------------------------------------
message BlockSummary {
  string work_sum = 1;
  int64 blocktime_average_ms = 2;
  string target_average = 3;
  int32 activated_field = 4;
  
  BlockHeader header = 5;
  int64 total_transactions = 6;
  bytes chain_index_trie_hash = 7;
  int32 summary_version = 8;
 
  // Current highest imported blocks from other shards
  map<int32, BlockHeader> imported_shards = 9;
  int64 tx_size_average = 10;
  int32 shard_length = 11; // Number of blocks in this shard so far

  // Maps shard id to shard history
  // longer history, but just has heights and hashes, not full headers
  map<int32, BlockImportList> shard_history_map = 12;

  int64 block_tx_count = 13;
}

message ExternalHeadList {
  int32 block_height = 1;
  repeated bytes head_hashes =2;
}

// If anything is added or changed here, it is vital to update
// WalletUtil.mergeDatabase as needed and increase WalletUtil.WALLET_DB_VERSION
// Or else the new fields will not be copied in a merge resulting in terrible data loss.
message WalletDatabase {
  repeated WalletKeyPair keys = 1;
  repeated AddressSpec addresses = 2;
  repeated Transaction transactions = 3;
  map<string, bool> used_addresses = 4;
  map<string, int64> address_create_time = 5;
  int32 version = 10;
  string network = 11;
  map<string,SeedStatus> seeds = 12;
  map<string,SeedStatus> xpubs = 13;
}

message EncryptedFile {
  bytes payload = 1; //Encrypted EncryptedFilePayload
  string function = 2;
  bytes iv = 3;
  int32 scrypt_memory_cost = 4;
  int32 scrypt_parallelization_cost = 5;
  int32 scrypt_cpu_cost = 6;
}
message EncryptedFilePayload {
  bytes payload = 1; // Actual data contents
  bytes sha256_hash = 2;
}

message SeedStatus
{
  bytes seed_id = 1;
  map<int32, int32> address_index = 2;
  string seed_xpub = 3;
}

message BalanceInfo {
  int64 confirmed = 1;
  int64 unconfirmed = 2;
  int64 spendable = 3;
}

message WalletKeyPair
{
  int32 signature_type = 1;
  bytes public_key = 2;
  bytes private_key = 3;
  bytes seed_id = 4;
  string hd_path = 5;
  int32 hd_change = 6;
  int32 hd_index = 7;
}

message SignedMessage {
  bytes payload = 1; //A serialized SignedMessagePayload
  bytes signature = 2;
}

message SignedMessagePayload {
  AddressSpec claim = 1;
  int64 timestamp = 2;
  oneof z {
    bytes tls_public_key = 5;
    //bytes blockhash = 6;
    PeerTipInfo peer_tip_info = 7;
    PeerInfo peer_info = 8;
  }
}
